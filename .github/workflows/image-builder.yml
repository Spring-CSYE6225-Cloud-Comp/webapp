
name: Build Image with Packer

on:
  pull_request_target:
    branches:
     - main
    types: [closed]
  # workflow_dispatch
 

jobs:
  Image-Packer:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Create Zip Archive
        run: |
          zip -r Neha_Shende_002783740_05.zip ./

      - name: Initialize MYSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo systemctl start mysql
          sudo systemctl status mysql

      - name: Initialize database
        run: |
          mysql -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"
          echo "MySQL database '${{ secrets.DB_NAME }}' has been created/initialized."
          echo "Inside following repo- '$(pwd)''"

      - name: Set up environment variables
        run: |
          echo "PORT=${{ secrets.PORT }}" > ${{ github.workspace }}/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> ${{ github.workspace }}/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> ${{ github.workspace }}/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ${{ github.workspace }}/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> ${{ github.workspace }}/.env
          echo "PUBSUB_VERIFY_EMAIL_TOPIC='verify_email'" >> ${{ github.workspace }}/.env
          echo "Contents of .env file:"
          cat ${{ github.workspace }}/.env

      - name: Set up NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14  

      - name: Install Dependencies
        run: npm install

      - name: Run tests
        run: npm run test:integration

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'


      - name: Build AMI
        run: |
          packer init gcp-centos.pkr.hcl
          packer fmt gcp-centos.pkr.hcl
          packer validate gcp-centos.pkr.hcl
          packer build -force gcp-centos.pkr.hcl
          echo "Contents of manifest.json:"
          cat manifest.json
          IMAGE_ID=$(jq '.builds | map(select(.builder_type == "googlecompute")) | sort_by(.build_time) | last.artifact_id' manifest.json)
          echo "IMAGE_ID is"
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT
          echo $(jq '.builds | map(select(.builder_type == "googlecompute")) | sort_by(.build_time) | last.artifact_id' manifest.json)

      - name: Get Terraform Outputs
        run: |
          INSTANCE_TEMPLATE_SELF_LINK=$(terraform output -raw instance_template_self_link)
          INSTANCE_GROUP_MANAGER_INSTANCE_GROUP=$(terraform output -raw instance_group_manager_instance_group)
 
      - name: Create New Instance Template Version
        run: |
          IMAGE_ID=${{ steps.build_ami.outputs.IMAGE_ID }}
          INSTANCE_NAME="webapp-instance-${{ github.sha }}"
          gcloud compute instances create "${INSTANCE_NAME}" \
            --source-instance-template="${INSTANCE_TEMPLATE_SELF_LINK}" \
            --image="${IMAGE_ID}" \
            --image-project="${{ secrets.GCP_PROJECT_ID }}"
          NEW_INSTANCE_TEMPLATE_SELF_LINK=$(gcloud compute instance-templates create-from-instance "${INSTANCE_NAME}" \
            --instance-template-name="webapp-template-${{ github.sha }}" \
            --instance-template-project="${{ secrets.GCP_PROJECT_ID }}" \
            --format='value(selfLink)')
          gcloud compute instances delete "${INSTANCE_NAME}" --quiet
 
      - name: Update Managed Instance Group
        run: |
          gcloud compute instance-groups managed set-instance-template "${INSTANCE_GROUP_MANAGER_INSTANCE_GROUP}" \
            --template "${NEW_INSTANCE_TEMPLATE_SELF_LINK}" \
            --region=${{ secrets.GCP_REGION }}
 
      - name: Start Rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update "${INSTANCE_GROUP_MANAGER_INSTANCE_GROUP}" \
            --region=${{ secrets.GCP_REGION }} \
            --max-unavailable "0" \
            --min-ready "2"
     
            - name: Monitor Update
            run: |
              STATUS="ROLLING_OUT"
              while [[ $STATUS == "ROLLING_OUT" ]]
              do
                STATUS=$(gcloud compute instance-groups managed describe "${INSTANCE_GROUP_MANAGER_INSTANCE_GROUP}" \
                  --region=${{ secrets.GCP_REGION }} \
                  --format='value(status)')
                echo "Instance group is $STATUS"
                sleep 10
              done
         
              if [[ $STATUS == "ROLLED_OUT" ]]
              then
                exit 0
              else
                exit 1
              fi