
name: Build Image with Packer

on:
  pull_request_target:
    branches:
     - demo
    types: [closed]
  workflow_dispatch:
 

jobs:
  Image-Packer:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Create Zip Archive
        run: |
          zip -r Neha_Shende_002783740_05.zip ./

      - name: Initialize MYSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo systemctl start mysql
          sudo systemctl status mysql

      - name: Initialize database
        run: |
          mysql -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"
          echo "MySQL database '${{ secrets.DB_NAME }}' has been created/initialized."
          echo "Inside following repo- '$(pwd)''"

      - name: Set up environment variables
        run: |
          echo "PORT=${{ secrets.PORT }}" > ${{ github.workspace }}/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> ${{ github.workspace }}/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> ${{ github.workspace }}/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ${{ github.workspace }}/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> ${{ github.workspace }}/.env
          echo "PUBSUB_VERIFY_EMAIL_TOPIC='verify_email'" >> ${{ github.workspace }}/.env
          echo "Contents of .env file:"
          cat ${{ github.workspace }}/.env

      - name: Set up NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14  

      - name: Install Dependencies
        run: npm install

      - name: Run tests
        run: npm run test:integration

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'


      - name: Build AMI
        run: |
          packer init gcp-centos.pkr.hcl
          packer fmt gcp-centos.pkr.hcl
          packer validate gcp-centos.pkr.hcl
          packer build gcp-centos.pkr.hcl

      - name: GET GCP IMAGE ID
        id: get_image_id
        run: |
          IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "Built GCP image ID is $IMAGE_ID"

      # - name: Get Terraform Outputs
      #   run: |
      #     INSTANCE_TEMPLATE_SELF_LINK=$(terraform output -raw instance_template_self_link)
      #     INSTANCE_GROUP_MANAGER_INSTANCE_GROUP=$(terraform output -raw instance_group_manager_instance_group)
 
      - name: Generate version number
        id: versioning
        run: echo "VERSION=$(date +%s)" >> $GITHUB_ENV

      - name: Create New Instance Template
        run: |
          TEMPLATE_NAME=webapp-instance-template-${{ env.VERSION }}
          gcloud compute instance-templates create $TEMPLATE_NAME --project=${{ secrets.PROJECT_ID }} --network=my-vpc --subnet=webapp --machine-type=${{ secrets.MACHINE_TYPE }} --instance-template-region=${{ secrets.REGION }} --region=${{ secrets.REGION }} --image=$IMAGE_ID --boot-disk-size=${{ secrets.BOOT_DISK_SIZE }} --boot-disk-type=pd-ssd --boot-disk-device-name=persistent-disk-0 --service-account=${{ secrets.SERVICEACCOUNT }} --scopes=${{ secrets.SCOPES }} --boot-disk-kms-key=${{ secrets.BOOT_DISK_KMS_KEY }} --metadata startup-script='#!/bin/bash
          echo "Hello World!"
          envFile=/opt/csye6225/Neha_Shende_002783740_05/.env
          # Remove existing .env file
          sudo rm -f "$envFile"
          # Recreate .env file
          sudo touch "$envFile"
          # Populate .env file
          echo "DB_NAME=${{secrets.DATABASE_NAME}}" | sudo tee -a "$envFile"
          echo "DB_HOST=${{secrets.DATABASE_HOST}}" | sudo tee -a "$envFile"
          echo "DB_USER=${{secrets.DATABASE_USER}}" | sudo tee -a "$envFile"
          echo "DB_PASSWORD=${{secrets.DATABASE_PASSWORD}}" | sudo tee -a "$envFile"
          echo "PORT='3306'" | sudo tee -a "$envFile"
          echo "PUBSUB_VERIFY_EMAIL_TOPIC=${{secrets.DATABASE_PUBSUB}}" | sudo tee -a "$envFile"
          sudo systemctl stop DBservice
          sudo systemctl start DBservice
          ' --quiet
 
      - name: Update Managed Instance Group
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp-instance-group --version=template=projects/${{ secrets.PROJECT_ID }}/regions/${{ secrets.REGION }}/instanceTemplates/my-template-${{ env.VERSION }} --region=${{ secrets.REGION }} --project=${{ secrets.PROJECT_ID }}
       
      - name: Monitor Update
        run: |
          gcloud compute instance-groups managed wait-until webapp-instance-group --version-target-reached --region ${{ secrets.REGION }}
